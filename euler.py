"""
Solving project euler problems with python.

In addition to the problems, I have implemented the code with scalability (avoiding hard-coding).

https://projecteuler.net/about
"""


def multiples_sum(*multiples, upper_bound):
    """
    Problem 1:
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.

    Solved/Correct.
    """
    sum_of_multiples = 0

    for integer in range(1, upper_bound):
        for multiple in multiples:
            if integer % multiple == 0:
                sum_of_multiples += integer
                break

    return sum_of_multiples


def sum_of_even_integers_fibonacci_sequence(upper_bound):
    """
    Problem 2:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.

    :param upper_bound:
    :return:

    Solved/Correct.
    """
    even_fibonacci_sum = 0
    fib1, fib2, fib3 = 1, 1, 0

    while True:
        fib3 = fib1 + fib2
        if fib3 > upper_bound:
            break
        if fib3 % 2 == 0:
            even_fibonacci_sum += fib3
        fib1, fib2 = fib2, fib3

    return even_fibonacci_sum


def max_prime_factor(number: int):
    """
    Problem 3:
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?

    :param number:
    :return:

    Solved/Correct.
    """
    maximum_prime_factor = 1
    if number % 2 == 0:
        max_prime_factor = 2
        number //= 2
    # number is odd now.
    # any product of factor x and y of a number > x
    for multiple in range(3, int(number ** 0.5 + 1), 2):
        if number % multiple == 0:
            maximum_prime_factor = multiple
            number //= multiple
    return maximum_prime_factor


def main():
    # problems are solved/invoked in order
    print(multiples_sum(3, 5, upper_bound=1000))
    print(sum_of_even_integers_fibonacci_sequence(4000000))
    print(max_prime_factor(600851475143))


if __name__ == "__main__":
    main()
